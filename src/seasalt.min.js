class SeaSalt_Common{constructor(config){this.version={major:0,minor:2};this.config={algorithm:"xchacha",secret:"changeme3xg4#",pwhash:"argon2",pwsecurity:"normal"};this.state={ready:false,aead:false};if(["argon2","scrypt"].indexOf(this.config.pwhash)===-1)this.config.pwhash="argon2";if(typeof config==="object")for(let i in config)if(config.hasOwnProperty(i))this.config[i]=config[i];if(typeof this.config.logger==="undefined")this.config.logger=console.log;this.pwhash={};this.pwhash.argon2=new SeaSalt_PWHash_Argon2;
this.pwhash.scrypt=new SeaSalt_PWHash_SCrypt;this.tools=new SeaSalt_Tools(this.config);this.secretbox=new SeaSalt_AEAD_SecretBox(this.config);this.aead={};this.aead.xchacha=new SeaSalt_AEAD_XChaCha(this.config);this.hash=new SeaSalt_Hashing;if(sodium){this.config.logger("SeaSalt - Loaded successfully");this.state.ready=true;this.state.aead=this.aead_test()}else console.error("SeaSalt - Libsodium was not found")}encrypt(string,secret,box){if(!string)throw"SeaSalt.encrypt() requires a string or object to encrypt";
if(!secret)secret=this.config.secret;if(!secret)throw"SeaSalt.encrypt() could not find a password to use";if(typeof this.aead[this.config.algorithm]==="object")return this.aead[this.config.algorithm].encrypt(string,secret,box);else throw"SeaSalt.encrypt() received invalid algorithm - "+this.config.algorithm;}decrypt(string,secret,box){if(!string)throw"SeaSalt.decrypt() requires a string to decrypt";if(!secret)secret=this.config.secret;if(!secret)throw"SeaSalt.decrypt() could not find a password to use";
if(typeof this.aead[this.config.algorithm]==="object")return this.aead[this.config.algorithm].decrypt(string,secret,box);else throw"SeaSalt.decrypt() received invalid algorithm - "+this.config.algorithm;}pwhash_create(password,security,algorithm){if(!algorithm)algorithm=this.config.pwhash;if(algorithm&&Object.keys(this.pwhash).indexOf(algorithm)===-1)algorithm=this.config.pwhash;return this.pwhash[algorithm].create(password,security)}pwhash_verify(hash,password,algorithm){if(!algorithm)algorithm=
this.config.pwhash;if(algorithm&&Object.keys(this.pwhash).indexOf(algorithm)===-1)algorithm=this.config.pwhash;return this.pwhash[algorithm].verify(hash,password)}test(){let result=sodium.to_hex(sodium.crypto_generichash(64,"test"));return result==="a71079d42853dea26e453004338670a53814b78137ffbed07603a41d76a483aa9bc33b582f77d30a65e6f29a896c0411f38312e1d66e0bf16386c86a89bea572"}aead_test(){let original="test";let ciphertext=this.encrypt(original);let result=this.decrypt(ciphertext);return original===
result}}class SeaSalt extends SeaSalt_Common{}
class SeaSalt_Hashing{constructor(string,hash,format){this.reservedProperties=["constructor","toString"];this.validFormats=["hex","binary","base64"];if(typeof string==="string"){let props=Object.getOwnPropertyNames(Object.getPrototypeOf(new SeaSalt_Hashing));for(let x=0;x<this.reservedProperties.length;x++)props.splice(props.indexOf(this.reservedProperties[x]),1);props=JSON.parse(JSON.stringify(props));if(typeof hash==="undefined")hash="sha256";if(this.validFormats.indexOf(format)===-1)format="hex";
if(props.indexOf(hash)===-1)throw"Invalid hash algorithm requested.";this.binary=this[hash](string,"binary");this.hex=sodium.to_hex(this.binary);this.base64=sodium.to_base64(this.binary);this.format=format;this.length=this[this.format].length}}toString(){return this.hex}sha256(string,format){if(!format)format="hex";if(this.validFormats.indexOf(format)===-1)format="hex";let result=sodium.crypto_hash_sha256(string);if(format==="hex")return sodium.to_hex(result);if(format==="base64")return sodium.to_base64(result);
return result}sha512(string,format){if(!format)format="hex";if(this.validFormats.indexOf(format)===-1)format="hex";let result=sodium.crypto_hash_sha512(string);if(format==="hex")return sodium.to_hex(result);if(format==="base64")return sodium.to_base64(result);return result}}
class SeaSalt_PWHash_Argon2{create(password,security){let opsLimit=sodium.crypto_pwhash_OPSLIMIT_INTERACTIVE;if(!security)security="normal";if(["light","normal","moderate","high"].indexOf(security)===-1)security="normal";if(security==="normal")opsLimit=opsLimit*2;else if(security==="moderate")opsLimit=opsLimit*4;else if(security==="high")opsLimit=opsLimit*6;return sodium.crypto_pwhash_str(password,opsLimit,sodium.crypto_pwhash_MEMLIMIT_INTERACTIVE)}verify(hash,password){return sodium.crypto_pwhash_str_verify(hash,
password)}}
class SeaSalt_PWHash_SCrypt{create(password,security){let opsLimit=sodium.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE;let memLimit=sodium.crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE;if(!security)security="normal";if(["light","normal","moderate","high"].indexOf(security)===-1)security="normal";if(security==="normal")opsLimit=sodium.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE*3;else if(security==="moderate")opsLimit=(sodium.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE+sodium.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE)*
.25;else if(security==="high")opsLimit=sodium.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE;let result=sodium.crypto_pwhash_scryptsalsa208sha256_str(password,opsLimit,memLimit);return result}verify(hash,password){return sodium.crypto_pwhash_scryptsalsa208sha256_str_verify(hash,password)}}
class SeaSalt_AEAD_SecretBox{constructor(userPassword,secretItem,config){this.config={minimumEntropy:1,minimumKeyLength:1,minimumStrength:0,logger:console.log};if(typeof userPassword==="object"){config=userPassword;userPassword=undefined;secretItem=undefined}if(typeof config==="object")for(let i in config)if(config.hasOwnProperty(i))this.config[i]=config[i];this.hash=new SeaSalt_Hashing;this.tools=new SeaSalt_Tools(config);this.aead=new SeaSalt_AEAD_XChaCha(config);if(userPassword)this.box=this.create(userPassword,
secretItem)}toString(){return this.box}create(userPassword,secretItem){if(this.box)return this.box;if(this.tools.passwordStrength(userPassword)<this.config.minimumStrength)throw"Supplied password does not meet the minimum strength requirements.";if(typeof secretItem==="boolean")secretItem=secretItem===false?"false":"true";if(typeof secretItem==="number")secretItem=secretItem.toString();if(typeof secretItem==="object")secretItem=JSON.stringify(secretItem);if(typeof secretItem==="undefined")secretItem=
this.aead.key();if(typeof secretItem!=="string")throw"Supplied secret item cannot be converted to a string.";this.box=this.aead.encrypt(secretItem,userPassword);let contents=this.aead.decrypt(this.box,userPassword);if(contents!==secretItem){this.config.logger("SeaSalt/AEAD/box_create - Failed to validate box contents");throw"Failed to validate the box contents.";}return this.box}repackage(box,userPassword,newPassword){if(!box&&!this.box)throw"Secret box must be provided for repackaging.";if(box&&
userPassword&&!newPassword){if(!this.box)throw"Secret box must be provided for repackaging.";newPassword=userPassword;userPassword=box;box=this.box}if(!box||!userPassword||!newPassword)throw"Required arguments are missing";if(this.tools.passwordStrength(newPassword)<this.config.minimumStrength)return;let contents=this.aead.decrypt(box,userPassword);if(typeof contents!=="string")return box;this.box=this.create(newPassword,contents);return this.box}check(box,userPassword,secretItem){if(!box&&!this.box)throw"Secret box must be provided for checking.";
if(box&&!userPassword){if(!this.box)throw"Secret box must be provided for repackaging.";userPassword=box;box=this.box}if(!box||!userPassword)throw"Required arguments are missing";if(secretItem&&typeof secretItem==="boolean")secretItem=secretItem===false?"false":"true";if(secretItem&&typeof secretItem==="number")secretItem=secretItem.toString();if(secretItem&&typeof secretItem==="object")secretItem=JSON.stringify(secretItem,true,5);if(secretItem&&typeof secretItem!=="string")return false;let contents=
this.aead.decrypt(box,userPassword);return secretItem&&contents===secretItem||typeof contents==="string"}}
class SeaSalt_AEAD_XChaCha{constructor(string,secret,box,config){if((typeof box==="object"||typeof secret==="object")&&typeof config==="undefined"){if(typeof secret==="object"){config=secret;secret=undefined;box=undefined}if(typeof box==="object"&&!(box instanceof SeaSalt_AEAD_SecretBox)){config=box;box=undefined}}this.config={minimumEntropy:1,minimumKeyLength:1,minimumStrength:0,logger:console.log};if(typeof string==="object"){config=string;string=undefined}if(typeof config==="object")for(let i in config)if(config.hasOwnProperty(i))this.config[i]=
config[i];this.hash=new SeaSalt_Hashing;this.tools=new SeaSalt_Tools;if(box instanceof SeaSalt_AEAD_SecretBox&&box.box)this.box=box.box;if(typeof box==="string")this.box=box;if(typeof string==="string")this.encrypt(string,secret,box)}encrypt(string,secret,box){if(!string||!secret)throw"SeaSalt_AEAD_XChaCha::encrypt requires a string or secret to encrypt";if(typeof box==="undefined"&&this.box)box=this.box;if(box instanceof SeaSalt_AEAD_SecretBox&&typeof box.box==="string")box=box.box;else if(box&&
typeof box!=="string")throw"SeaSalt_AEAD_XChacha::decrypt supplied SecretBox is invalid";if(typeof box==="string"){this.box=box;let contents=this.decrypt(box,secret,false);if(typeof contents==="string"){let object;try{object=JSON.parse(contents)}catch(e){}secret=typeof object==="object"?object.secret:contents}else throw"Failed to decrypt secret box.";}let nonce=sodium.randombytes_buf(sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES);let key=sodium.from_hex(this.hash.sha256(secret));let ciphertext=
sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(string,"","",nonce,key);sodium.memzero(key);this.ciphertext=sodium.to_hex(nonce)+sodium.to_hex(ciphertext);return this.ciphertext}decrypt(string,secret,box){if(!string||!secret){console.error("SeaSalt_AEAD_XChaCha::decrypt requires a string and secret to decrypt");return}if(typeof box==="undefined"&&this.box)box=this.box;if(box instanceof SeaSalt_AEAD_SecretBox&&typeof box.box==="string")box=box.box;else if(box&&typeof box!=="string"){console.error("SeaSalt_AEAD_XChacha::decrypt supplied SecretBox is invalid");
return}if(typeof box==="string"){this.box=box;let contents=this.decrypt(box,secret,false);if(typeof contents==="string"){let object;try{object=JSON.parse(contents)}catch(e){}secret=typeof object==="object"?object.secret:contents}else throw"Failed to decrypt secret box.";}let nonce;let ciphertext;try{nonce=sodium.from_hex(string.substr(0,sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES*2));ciphertext=sodium.from_hex(string.substr(sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES*2,string.length))}catch(e){return undefined}let key=
sodium.from_hex(this.hash.sha256(secret));let result="";try{result=sodium.crypto_aead_xchacha20poly1305_ietf_decrypt("",ciphertext,"",nonce,key)}catch(e){}sodium.memzero(key);return result?sodium.to_string(result):undefined}key(){return sodium.to_hex(sodium.crypto_aead_xchacha20poly1305_ietf_keygen())}toJSON(){var data={box:this.box,ciphertext:this.ciphertext};return JSON.stringify(data,true,5)}}
class SeaSalt_Tools{constructor(config){this.config={minimumEntropy:6,minimumKeyLength:6,minimumStrength:1};if(typeof config==="object")for(let i in config)if(config.hasOwnProperty(i))this.config[i]=config[i];if(typeof this.config.logger==="undefined")this.config.logger=console.log}randomString(length,alpha,caps,numeric,symbols){if(typeof length!=="number")length=32;if(typeof alpha!=="boolean")alpha=true;if(typeof caps!=="boolean")caps=true;if(typeof numeric!=="boolean")numeric=true;if(typeof symbols!==
"boolean")symbols=true;var pools={alpha:"abcdefghijklmnopqrstuvwxyz",caps:"ABCDEFGHIJKLMNOPQRSTUVWXYZ",numeric:"0123456789",symbols:"[];',./<>?:\"{}\\|!@#$%^&*()-=_+`~"};var pool="";if(alpha===true)pool=pool.concat(pools.alpha);if(caps===true)pool=pool.concat(pools.caps);if(numeric===true)pool=pool.concat(pools.numeric);if(symbols===true)pool=pool.concat(pools.symbols);if(pool.length===0)return;var string="";for(var i=0;i<length;i++)string+=pool.charAt(Math.floor(Math.random()*pool.length));return string}passwordStrength(password){let strength=
0;let cat=0;let matches={};if(matches.alpha=password.match(/[a-z]/g))strength++;if(matches.caps=password.match(/[A-Z]/g))strength++;if(matches.numeric=password.match(/[0-9]/g))strength++;if(matches.symbol=password.match(/[-!$%^&*()_+|~=`{}\[\]:#";'@<>?,.\/]/g))strength++;cat=strength;let chars=[];for(let i in matches)if(matches.hasOwnProperty(i))if(typeof matches[i]==="object"&&matches[i]!==null&&matches[i].length)for(let x=0;x<matches[i].length;x++)if(chars.indexOf(matches[i][x].toLowerCase())===
-1)chars.push(matches[i][x].toLowerCase());if(chars.length>=this.config.minimumEntropy)strength=strength++;if(chars.length<this.config.minimumEntropy)strength=strength-3;if(strength===1&&password.length>=this.config.minimumKeyLength*2)strength++;if(password.length<this.config.minimumKeyLength+4)strength--;if(cat===1)strength--;if(password.length<this.config.minimumKeyLength)strength=0;if(strength<0)strength=0;if(strength>4)strength=4;return strength}}
class SeaSalt_Keychain{constructor(sig,password,config,data){if(typeof sig==="object"){config=sig;data=password;sig=undefined;password=undefined}this.test=[];this.config={debug:true,hash:"sha512",recoveryTokenCount:2,recoveryTokenLength:12,maxRecoveryPoints:5,maxRecoveryAge:undefined,signatureLength:12,saltLength:8,keysaltLength:8,storage:{enabled:true,prefix:"seasalt:keychain:",read:function(key){return localStorage.getItem(key)},write:function(key,value){return localStorage.setItem(key,value)},
delete:function(key){return localStorage.removeItem(key)},list:function(){return Object.keys(localStorage)}},log:undefined};if(typeof sig==="string"&&typeof password==="string"){this.config.sig=sig;this.config.password=password;sig=undefined;password=undefined}if(typeof config==="object")Object.keys(config).filter(function(key){this.config[key]=config[key]});if(typeof this.config.storage.prefix!=="string")this.error("No storage prefix has been specified");if(typeof this.config.log!=="function")this.config.log=
function(){if(this.config.debug===true){if(typeof arguments[0]==="string")console.log.apply(null,arguments);if(typeof arguments[0]==="object")console.error(null,arguments)}};this.aead=new SeaSalt_AEAD_XChaCha;this.tools=new SeaSalt_Tools;this.ready=false;this.keys={};this.history={};this.enabled=true;this.active=undefined;this.keysalt="0xk*S#x9";let self=this;if(typeof data!=="string")try{data=this.config.storage.read(this.config.storage.prefix+"keyring")}catch(e){}if(typeof data==="string"){let keychain;
try{keychain=JSON.parse(data)}catch(e){}if(typeof keychain==="object"){this.log("SeaSalt/Keychain loading stored keychain from localStorage");Object.keys(keychain).filter(function(key){self[key]=keychain[key]})}}this.ready=true;this.log("SeaSalt/Keychain loaded successfully");if(this.config.sig&&this.config.password){try{this.open(this.config.sig,this.config.password)}catch(e){delete this.config.sig;delete this.config.password;this.error("SeaSalt/Keychain failed to open key with error: "+e)}delete this.config.sig;
delete this.config.password}}log(arg){this.config.log.apply(this,arguments)}hash(string,salt){if(typeof salt!=="string")salt="";return(new SeaSalt_Hashing(salt+string+salt,this.config.hash)).toString()}error(message){throw message;}keyconf(config){let object={format:0,box:"",name:"",salt:"",history:[],recovery:{}};if(typeof config!=="object")config={};Object.keys(config).filter(function(key){if(typeof object[key]==="undefined")return;object[key]=config[key]});if(object.box===""||object.name===""||
object.salt==="")this.error("Supplied key configuration is incomplete");return object}toJSON(){return JSON.stringify({keys:this.keys,history:this.history,enabled:this.enabled})}save(){if(this.config.storage.enabled!==true){this.log("SeaSalt/Keychain is bypassing a save request because localStorage is turned off");return true}try{this.config.storage.write(this.config.storage.prefix+"keyring",this.toJSON());this.log("SeaSalt/Keychain successfully wrote keychain to localStorage")}catch(e){this.log("SeaSalt/Keychain failed to write keychain to localStorage");
this.log(e);return false}return true}create(name,userPassword){let sig=(new SeaSalt_Tools).randomString(this.config.signatureLength,true,true,true,false);let salt=(new SeaSalt_Tools).randomString(this.config.saltLength);let keysalt=(new SeaSalt_Tools).randomString(this.config.keysaltLength);let passphrase=this.hash(this.hash(userPassword),salt);let secretbox=new SeaSalt_AEAD_SecretBox(passphrase,{keysalt:keysalt,secret:this.aead.key()});this.keys[sig]=this.keyconf({box:secretbox.box,name:name,salt:salt});
let codes={};for(let i=0;i<this.config.recoveryTokenCount;i++){let data=this.create_recovery(sig,userPassword);this.keys[sig].recovery[this.hash(data.code)]=data.token;codes[data.code]=data.token}if(!this.active){this.active=sig;this.passphrase=passphrase;this.keysalt=keysalt}if(this.save()===true)return{sig:sig,codes:codes};return false}import_key(sig,data){if(this.ready!==true)this.error("Keychain state not ready");if(typeof data==="string")try{data=JSON.parse(data)}catch(e){}if(typeof data!=="object"||
data.format!==0||typeof data.name!=="string"||typeof data.box!=="string")return false}export_key(sig){if(this.ready!==true||sig!==true&&this.listkeys().indexOf(sig||this.active)===-1)this.error("Keychain state not ready");return JSON.stringify(sig===true?this.keys:this.keys[sig||this.active],null,5)}open(sig,userPassword){if(!userPassword){userPassword=sig;let keys=this.listkeys();sig=keys.length===1?keys[0]:undefined}if(this.ready!==true||typeof this.keys[sig]!=="object")this.error("Keychain state not ready or invalid signature provided");
let passphrase=this.hash(this.hash(userPassword),this.keys[sig].salt);let encrypted;let aead=new SeaSalt_AEAD_XChaCha;try{encrypted=aead.encrypt("testing",passphrase,this.keys[sig].box);if(aead.decrypt(encrypted,passphrase,this.keys[sig].box)!=="testing")return false}catch(e){throw e;}this.active=sig;this.passphrase=passphrase;this.keysalt=this.get_keysalt();this.log("SeaSalt/Keychain opened key with signature: "+sig);return true}close(){this.active=undefined;this.passphrase=undefined;this.keysalt=
undefined;return true}update(newPassword){if(this.ready!==true||this.listkeys().indexOf(this.active)===-1)this.error("Keychain state not ready");if(typeof newPassword==="string"&&typeof this.keys[this.active]==="object")this.store_history();let passphrase=typeof newPassword==="string"?this.hash(this.hash(newPassword),this.keys[this.active].salt):undefined;this.keys[this.active].box=(new SeaSalt_AEAD_SecretBox).repackage(this.keys[this.active].box,this.passphrase,passphrase||this.passphrase);if(passphrase)this.passphrase=
passphrase;return this.save()}store_history(sig){if(this.ready!==true||this.listkeys().indexOf(sig||this.active)===-1)this.error("Keychain state not ready");this.keys[sig||this.active].history.push(this.keys[sig||this.active].box);return this.save()}create_recovery(sig,userPassword,box){if(!box&&(typeof this.keys[sig||this.active]!=="object"||typeof userPassword!=="string"))this.error("Invalid arguments");let passphrase=this.hash(this.hash(userPassword),this.keys[sig||this.active].salt);let code=
this.tools.randomString(this.config.recoveryTokenLength,false,false,true,false);let token=(new SeaSalt_AEAD_SecretBox).repackage(box||this.keys[sig||this.active].box,passphrase,this.hash(this.hash(code),this.keys[sig||this.active].salt));return{code:code,token:token}}find_recovery(sig,code,boxes){if(typeof this.keys[sig]!=="object")this.error("Invalid signature");if(typeof boxes==="undefined")boxes=Object.values(this.keys[sig].recovery);if(typeof boxes==="string")boxes=[boxes];if(!Array.isArray(boxes))return[];
let self=this;boxes=boxes.filter(function(box){let encrypted;try{encrypted=self.aead.encrypt("testing",self.hash(self.hash(code),self.keys[sig].salt),box)}catch(e){}if(!encrypted)return false;let decrypted;try{decrypted=self.aead.decrypt(encrypted,self.hash(self.hash(code),self.keys[sig].salt),box)}catch(e){}return decrypted==="testing"});return boxes}restore_recovery(sig,code,boxes,newPassword){if(typeof this.keys[sig]!=="object")this.error("Invalid signature");if(typeof boxes==="string")boxes=[boxes];
if(!Array.isArray(boxes))this.error("Supplied box is not valid");let self=this;let passphrase=this.hash(this.hash(newPassword),this.keys[sig].salt);let codephrase=this.hash(this.hash(code),this.keys[sig].salt);let secretbox;boxes.filter(function(box){if(typeof secretbox==="string")return;try{secretbox=(new SeaSalt_AEAD_SecretBox).repackage(box,codephrase,passphrase)}catch(e){}});if(typeof secretbox!=="string")return false;this.store_history(sig);this.active=sig;this.passphrase=passphrase;this.ready=
true;this.keys[sig].box=secretbox;this.keysalt=this.get_keysalt();return true}key(key){if(this.ready!==true||this.listkeys().indexOf(this.active)===-1)this.error("Keychain state not ready");return this.config.storage.prefix+this.active+":"+this.keys[this.active].format+":"+this.hash(key,this.keysalt)}get_keysalt(){if(this.ready!==true||typeof this.keys[this.active]!=="object")this.error("Keychain state not ready or invalid signature provided");let jsdoc=(new SeaSalt_AEAD_XChaCha).decrypt(this.keys[this.active].box,
this.passphrase);try{jsdoc=JSON.parse(jsdoc)}catch(e){}if(typeof jsdoc==="object"&&jsdoc.keysalt)return jsdoc.keysalt;this.error("Failed to locate keysalt")}encrypt(string){if(this.ready!==true||this.listkeys().indexOf(this.active)===-1)this.error("Keychain state not ready");return(new SeaSalt_AEAD_XChaCha).encrypt(string,this.passphrase,this.keys[this.active].box)}decrypt(ciphertext){if(this.ready!==true||this.listkeys().indexOf(this.active)===-1)this.error("Keychain state not ready");return(new SeaSalt_AEAD_XChaCha).decrypt(ciphertext,
this.passphrase,this.keys[this.active].box)}read(key){if(this.ready!==true||this.listkeys().indexOf(this.active)===-1)this.error("Keychain state not ready");if(this.config.storage.enabled!==true){this.log("SeaSalt/Keychain is bypassing a read request because localStorage is turned off");return}let ciphertext;try{ciphertext=this.config.storage.read(this.key(key))}catch(e){}if(!ciphertext)return;return this.decrypt(ciphertext)}write(key,value){if(this.ready!==true||this.listkeys().indexOf(this.active)===
-1)this.error("Keychain state not ready");if(this.config.storage.enabled!==true){this.log("SeaSalt/Keychain is bypassing a write request because localStorage is turned off");return false}if(typeof key!=="string"||typeof value!=="string")this.error("Arguments not valid");let ciphertext=this.encrypt(value);if(typeof ciphertext!=="string")return false;key=this.key(key);try{this.config.storage.write(key,ciphertext)}catch(e){return false}return key}destroy(sig,history,purge){if(typeof sig==="boolean"){purge=
history;history=sig;sig=undefined}if(this.ready!==true||this.listkeys().indexOf(sig||this.active)===-1)throw"Signature does not exist or keychain is not ready";if(history!==true)this.history[sig||this.active]=this.keys[sig||this.active];delete this.keys[sig||this.active];if(purge===true)this.purge(sig||this.active,false,true);if(sig===undefined||sig===this.active)this.close();return this.save()}listkeys(){return Object.keys(this.keys)}purge(sig,all,confirm,reverse,history){if(typeof this.keys[sig]!==
"object"&&all!==true)this.error("Signature does not exist");if(this.config.storage.enabled!==true){this.log("SeaSalt/Keychain is bypassing a purge request because localStorage is turned off");return}if(typeof all!=="boolean")this.error("Invalid arguments");if(confirm!==true)this.error("You must confirm this action in the third argument");let self=this;let keys=this.config.storage.list().filter(function(key){if(reverse===true)return key.indexOf(self.config.storage.prefix)>-1&&key.indexOf("keyring")===
-1&&key.indexOf(sig)===-1;else return key.indexOf(self.config.storage.prefix)>-1&&key.indexOf(sig)>-1});let sigs=[];keys.filter(function(key){self.config.storage.delete(key);let regex=new RegExp("^"+self.config.storage.prefix+"([a-zA-Z0-9]*):[0-9]*?:.*$");let matches=key.match(regex);if(matches!==null&&sigs.indexOf(matches[1])===-1)sigs.push(matches[1])});this.log("SeaSalt/Keychain purged storage keys: "+JSON.stringify(keys));if(reverse===true)Object.keys(this.keys).filter(function(csig){if(csig!==
sig&&sigs.indexOf(csig)===-1)sigs.push(csig)});if(all===true){this.log("SeaSalt/Keychain purged signatures: "+JSON.stringify(sigs));sigs.filter(function(sig){self.destroy(sig,history)})}if(all===true&&sigs.indexOf(this.active)>-1)this.close();return{storage:keys,sigs:all===true?sigs:[]}}rekey(confirm){if(this.ready!==true||this.listkeys().indexOf(this.active)===-1)this.error("Keychain state not ready");if(this.config.storage.enabled!==true){this.log("SeaSalt/Keychain is bypassing a rekey request because localStorage is turned off");
return}if(confirm!==true)this.error("Confirmation argument not provided");let deleted=this.config.storage.list().filter(function(key){let regex=new RegExp("("+this.active+")");if(key.match(regex)!==null);})}backup(sigs){if(typeof JSZip!=="object"||!(JSZip instanceof JSZip))this.error("JSZip is required for making backups")}};
